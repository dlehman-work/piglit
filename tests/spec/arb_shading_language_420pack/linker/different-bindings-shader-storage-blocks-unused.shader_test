/* The GL 4.30 (Core Profile) spec says:
 *
 *     "7.8 Shader Buffer Variables and Shader Storage Blocks
 *
 *      ...
 *
 *      When a named shader storage block is declared by multiple
 *      shaders in a program, it must be declared identically in each
 *      shader. The buffer variables within the block must be declared
 *      with the same names, types, qualification, and declaration
 *      order. If a program contains multiple shaders with different
 *      declarations for the same named shader storage block, the
 *      program will fail to link."
 *
 * Although this restriction is not included in the
 * ARB_shading_language_420pack spec, it is reasonable to believe that
 * it applies to it too.
 *
 * Verify that a link error happens when using different binding
 * points for Shader Storage Blocks with the same name in different
 * compilation units, even if unused.
 */

[require]
GL >= 4.00
GLSL >= 1.30
GL_ARB_shading_language_420pack
GL_ARB_shader_storage_buffer_object

[vertex shader]
#version 130
#extension GL_ARB_shading_language_420pack: require
#extension GL_ARB_shader_storage_buffer_object: require

layout (binding = 0) buffer unused {
	vec4 color;
};

in vec4 piglit_vertex;

void main()
{
	gl_Position = piglit_vertex;
}

[fragment shader]
#version 130
#extension GL_ARB_shading_language_420pack: require
#extension GL_ARB_shader_storage_buffer_object: require

layout (binding = 1) buffer unused {
	vec4 color;
};

out vec4 fs_out;

void main()
{
	fs_out = vec4(0,0,0,1);
}

[test]
link error
