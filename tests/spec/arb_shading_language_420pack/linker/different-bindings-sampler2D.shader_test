/* The GLSL 4.20 spec, v11, says:
 *
 *     "A link error will result if two compilation units in a program
 *      specify different integer-constant bindings for the same
 *      opaque-uniform name. However, it is not an error to specify a
 *      binding on some but not all declarations for the same name, as
 *      shown in the examples below."
 *
 * Although this restriction is not included in the
 * ARB_shading_language_420pack spec, it is reasonable to believe that
 * it applies to it too.
 *
 * Verify that a link error happens when using different binding
 * points for an opaque type (sampler2D) with the same name in
 * different compilation units.
 */

[require]
GLSL >= 1.30
GL_ARB_shading_language_420pack

[vertex shader]
#version 130
#extension GL_ARB_shading_language_420pack: require
#extension GL_ARB_uniform_buffer_object: require

layout (binding = 0) uniform sampler2D tex;

in vec4 piglit_vertex;
out vec4 vs_fs;

void main()
{
	vs_fs = texture2D(tex, gl_Vertex.xy);
	gl_Position = piglit_vertex;
}

[fragment shader]
#version 130
#extension GL_ARB_shading_language_420pack: require
#extension GL_ARB_uniform_buffer_object: require

layout (binding = 1) uniform sampler2D tex;

uniform vec4 cst;
in  vec4 vs_fs;
out vec4 fs_out;

void main()
{
	fs_out = vs_fs * texture2D(tex, cst.xy).x;
}

[test]
link error
